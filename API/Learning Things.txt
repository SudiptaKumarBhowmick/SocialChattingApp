******************* .NET CORE *******************

AddSingleton - It creates and instatiated for dependency injection. When it creates it
does not stop untill the application stops.

AddScoped - It is a scoped for the lifetime of a http request. When the request is
finished the service is disposed.One instance is available throughout the application per request.

AddTransient - service is created and destroyed as soon as the method is finished. Transient creates 
new instance for every service/ controller as well as for every request and every user.

**Why we need DTOs?
-Mainly when we want to pass the data to API inside the body of our request we need to pass it as an object.
-Another reason is to send back a certain amount of data from our API.

**Startup Class--
**ConfigureSercies Method
The Dependency Injection pattern is used heavely in ASP.NET Core architecture. 
It includes built-in IoC container to provide dependent objects using constructors.

The ConfigureServices method is a place where you can register your dependent classes with the built-in IoC container. 
After registering dependent class, it can be used anywhere in the application. 
You just need to include it in the parameter of the constructor of a class where you want to use it. 
The IoC container will inject it automatically.

ASP.NET Core refers dependent class as a Service. So, whenever you read "Service" then understand it as a class 
which is going to be used in some other class.

ConfigureServices method includes IServiceCollection parameter to register services to the IoC container.

**Configure Method
The Configure method is a place where you can configure application request pipeline for your application 
using IApplicationBuilder instance.

ASP.NET Core introduced the middleware components to define a request pipeline, which will be executed on every request.

At run time, the ConfigureServices method is called before the Configure method.


******************* Angular *******************
**Template Reference Variable
To create a angular form we need to declare a form name using (#) template reference variable.
Example: #loginForm = "ngForm"

**How to make two way bindings
For two way bindings we need to do two things-
one is -> give a "name" to the html element
second is -> give [(ngModel)] to the html element

[(ngModel)] --> In angular, paranthesis or first bracket infers "sending data from template to component"
other hand, square bracket or third bracket inferes "sending data from component to template"

**Angular Service
In angular, services are injectable and they are singleton. It doesn't destroys until the app is closed.

**Double Exclamation Mark
Double exclamation mark makes an object to a boolean. like --> var loggedIn = !!user;
if user is null then it turns to be false otherwise if it is an object it turns to be true.

